AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'The following CloudFormation deploys demo serverless resources'
Parameters:
  AppCode:
    Type: 'String'
    Default: 'demo-serverless'
  Environment:
    Type: 'String'
    Default: 'dev'
  ProcessQueueManagerSchedule:
    Type: String
    Default: "rate(5 minutes)"
    Description: Schedule, cron or rate, for state machine to run.
  ProcessLambdaExecutionQueryMins:
    Type: String
    Default: "2"
  ProcessLambdaMaxConcurrent:
    Type: String
    Default: "10"
  ProcessLambdaSQSBatchSize:
    Type: String
    Default: "5"
  ProcessLambdaTimeoutSecs:
    Type: String
    Default: "300"
  QueueProcessName:
    Type: String
    Default: "DemoQueue"
  CreateAPIKey:
    Type: 'String'
    Default: 'false'
    AllowedValues: ['true', 'false']
  APIDeploymentStage:
    Type: 'String'
    Default: 'v1'
  APIKeyValue:
    Description: Predetermined value to use for API GW Key (if selected).
    Type: String
    Default: "123456789012345678901234567890"
  PrimaryRegion:
    Description: Primary Region ID to detect where to deploy account wide resources. 
    Type: String
    Default: "ap-southeast-2"

Conditions:
  IsPrimaryRegion: !Equals 
    - !Ref PrimaryRegion
    - !Ref AWS::Region
  DoAPIKEY: !Equals 
    - !Ref CreateAPIKey
    - 'true'

Globals:
  Function:
    Environment:
      Variables:
        ENVIRONMENT: !Sub '${Environment}'
        APP_CODE: !Sub '${AppCode}'

Resources:
  FileDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::AccountId}-${AppCode}-${Environment}-sam-file-data'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3'
              SSEAlgorithm: 'aws:kms'
      LoggingConfiguration:
        DestinationBucketName: !Sub '${AWS::AccountId}-logging'
        LogFilePrefix: s3serveraccesslogs/sam-file-data
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt ProcessSQSQueue.Arn
  ControlDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${AppCode}-${Environment}-sam-Process-Control'
      AttributeDefinitions:
        - AttributeName: 'process_name'
          AttributeType: 'S'
        - AttributeName: 'metric_name'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'process_name'
          KeyType: 'HASH'
        - AttributeName: 'metric_name'
          KeyType: 'RANGE'
      BillingMode: 'PAY_PER_REQUEST'
  FilesDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${AppCode}-${Environment}-sam-Files'
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
        - AttributeName: 'filename'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
      BillingMode: 'PAY_PER_REQUEST'
      GlobalSecondaryIndexes:
        -
          IndexName: 'filename-index'
          KeySchema:
            -
              AttributeName: 'filename'
              KeyType: 'HASH'
            -
              AttributeName: 'id'
              KeyType: 'RANGE'
          Projection:
            NonKeyAttributes:
              - 'filename'
              - 'id'
              - 'date_modified'
            ProjectionType: 'INCLUDE'

  S3ReadWritePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${AppCode}-${Environment}-sam-S3-ReadWrite-Policy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:ListBucket'
              - 's3:GetBucket*'
              - 's3:GetObject*'
              - 's3:PutObject'
              - 's3:PutObjectTagging'
              - 's3:DeleteObject'
              - 's3:DeleteObjectTagging'
              - 's3:ListMultipartUploadParts'
              - 's3:AbortMultipartUpload'
            Resource:
              - !Sub 'arn:aws:s3:::${AWS::AccountId}-${AppCode}-${Environment}-sam-file-data'
              - !Sub 'arn:aws:s3:::${AWS::AccountId}-${AppCode}-${Environment}-sam-file-data/*'
  DynamoReadWritePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${AppCode}-${Environment}-sam-DynamoDB-ReadWrite-Policy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:BatchGet*'
              - 'dynamodb:DescribeStream'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:Get*'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:BatchWrite*'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:PutItem'
            Resource:
              - !Sub '${ControlDynamoDBTable.Arn}'
              - !Sub '${ControlDynamoDBTable.Arn}/index/*'
              - !Sub '${FilesDynamoDBTable.Arn}'
              - !Sub '${FilesDynamoDBTable.Arn}/index/*'
  StepFunctionPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${AppCode}-${Environment}-sam-StepFunction-Policy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'states:Send*'
              - 'states:StartExecution'
              - 'states:ListExecutions'
            Resource:
              - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AppCode}-${Environment}-sam-Process-Queue-Machine'
  SQSPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${AppCode}-${Environment}-sam-SQS-Policy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sqs:ReceiveMessage*'
              - 'sqs:ChangeMessage*'
              - 'sqs:SendMessage*'
              - 'sqs:DeleteMessage*'
              - 'sqs:GetQueueAttributes'
            Resource:
              - !GetAtt 'ProcessSQSQueue.Arn'
  CloudwatchPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${AppCode}-${Environment}-sam-Cloudwatch-Policy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLog*'
              - 'logs:GetLog*'
              - 'logs:PutLog*'
              - 'logs:DeleteMessage*'
              - 'logs:DescribeLogStreams'
              - 'logs:DescribeLogGroups'
              - 'logs:UpdateLogDelivery'
              - 'logs:DeleteLogDelivery'
              - 'logs:ListLogDeliveries'
              - 'logs:PutResourcePolicy'
              - 'logs:DescribeResourcePolicies'
            Resource:
              - '*'
  CloudwatchMetricsPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub '${AppCode}-${Environment}-sam-CloudwatchMetrics-Policy'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'cloudwatch:GetMetricData'
            Resource:
              - '*'

  ProcessSQSQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 120
  ProcessSQSQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal: 
              Service:
                - "events.amazonaws.com"
                - "s3.amazonaws.com"
            Action: "SQS:SendMessage"
            Resource: !GetAtt 'ProcessSQSQueue.Arn'
      Queues:
      - !Ref 'ProcessSQSQueue'

  ControlSFNFunction:
    Type: 'AWS::Serverless::Function'
    DependsOn: ControlSFNFunctionLogGroup
    Properties:
      FunctionName: !Sub '${AppCode}-${Environment}-sam-Process-Queue-Control-Lambda'
      CodeUri: '../src/functions/state-machine-control/'
      Layers:
        - !Ref UtilsLayer
        - !Ref ModelsLayer
      Handler: lambda.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 10
      Tracing: 'Active'
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - !Ref 'StepFunctionPolicy'
        - !Ref 'DynamoReadWritePolicy'
        - !Ref 'SQSPolicy'
        - !Ref 'CloudwatchMetricsPolicy'
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'iam:PassRole'
              Resource: '*'
            - Effect: Allow
              Action:
                - 'lambda:InvokeFunction'
              Resource: 
                - !GetAtt 'ProcessSQSFunction.Arn'
      Environment:
        Variables:
          APP_CODE: !Ref AppCode
          ENVIRONMENT: !Ref Environment
          SQS_QUEUE_URL: !Ref ProcessSQSQueue
          SQS_QUEUE_ARN: !GetAtt ProcessSQSQueue.Arn
          STEP_FUNCTION_ARN: !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AppCode}-${Environment}-sam-Process-Queue-Machine'
          DYNAMODB_CONTROL_TABLE_NAME: !Ref ControlDynamoDBTable
          DYNAMODB_CONTROL_TABLE_ARN: !GetAtt ControlDynamoDBTable.Arn
          PROCESSOR_LAMBDA_NAME: !Ref ProcessSQSFunction
          PROCESSOR_LAMBDA_ARN: !GetAtt ProcessSQSFunction.Arn
          PROCESSOR_LAMBDA_MAX_CONCURRENT: !Ref ProcessLambdaMaxConcurrent
          PROCESSOR_LAMBDA_EXECUTION_QUERY_MINS: !Ref ProcessLambdaExecutionQueryMins
          PROCESSOR_LAMBDA_SQS_BATCH_SIZE:  !Ref ProcessLambdaSQSBatchSize
          PROCESS_NAME: !Ref QueueProcessName
  ControlSFNFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AppCode}-${Environment}-sam-Process-Queue-Control-Lambda'
      RetentionInDays: 14
  ProcessSQSFunction:
    Type: 'AWS::Serverless::Function'
    DependsOn: ProcessSQSFunctionLogGroup
    Properties:
      FunctionName: !Sub '${AppCode}-${Environment}-sam-Process-Queue-Execute-Lambda'
      CodeUri: '../src/functions/state-machine-process/'
      Layers:
        - !Ref UtilsLayer
        - !Ref ModelsLayer
      Handler: lambda.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: !Ref ProcessLambdaTimeoutSecs
      Tracing: 'Active'
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - !Ref 'StepFunctionPolicy'
        - !Ref 'DynamoReadWritePolicy'
        - !Ref 'SQSPolicy'
      Environment:
        Variables:
          APP_CODE: !Ref AppCode
          ENVIRONMENT: !Ref Environment
          SQS_QUEUE_URL: !Ref ProcessSQSQueue
          SQS_QUEUE_ARN: !GetAtt ProcessSQSQueue.Arn
          DYNAMODB_FILES_TABLE_NAME: !Ref FilesDynamoDBTable 
          DYNAMODB_FILES_TABLE_ARN: !GetAtt FilesDynamoDBTable.Arn 
          PROCESSOR_LAMBDA_SQS_BATCH_SIZE: !Ref ProcessLambdaSQSBatchSize
          PROCESSOR_LAMBDA_TIMEOUT_SECS: !Ref ProcessLambdaTimeoutSecs
  ProcessSQSFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AppCode}-${Environment}-sam-Process-Queue-Execute-Lambda'
      RetentionInDays: 14

  UtilsLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      Description: !Sub 'Layer for utils "'
      ContentUri: ../src/layers/utils/python/
      CompatibleRuntimes:
        - 'python3.11'
      LayerName: !Sub '${AppCode}-${Environment}-sam-Utils-Layer'
    Metadata:
      BuildMethod: python3.11   # Required to have AWS SAM build this layer
  ModelsLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      Description: !Sub 'Layer for models "'
      ContentUri: ../src/layers/models/python/
      CompatibleRuntimes:
        - 'python3.11'
      LayerName: !Sub '${AppCode}-${Environment}-sam-Models-Layer'
    Metadata:
      BuildMethod: python3.11   # Required to have AWS SAM build this layer

  ProcessQueueStateMachineExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AppCode}-${Environment}-sam-Process-Queue-Machine-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - !Sub states.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: "/"
      ManagedPolicyArns:
        - !Ref 'CloudwatchPolicy'
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: 
                  - !GetAtt 'ControlSFNFunction.Arn'
                  - !GetAtt 'ProcessSQSFunction.Arn'
  ProcessQueueStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'step/${AWS::Region}/${AWS::AccountId}/${AppCode}-${Environment}-sam-Process-Queue-Machine'
      RetentionInDays: 14
  ProcessQueueStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: !Sub '${AppCode}-${Environment}-sam-Process-Queue-Machine'
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Demo SQS Poll and Process Workflow",
              "StartAt": "PollAndProcessSQS",
              "States": {
                  "PollAndProcessSQS": {
                      "Type": "Task",
                      "Resource": "${ControlFunction}",
                      "Parameters": {
                          "InputCopy.$": "$"
                      },
                      "Retry": [
                          {
                              "ErrorEquals": [
                                  "CapacityException",
                                  "ProcessException"
                              ],
                              "IntervalSeconds": 10,
                              "MaxAttempts": 30,
                              "BackoffRate": 1.0
                          },
                          {
                              "ErrorEquals": [
                                  "States.ALL"
                              ],
                              "IntervalSeconds": 5,
                              "MaxAttempts": 2,
                              "BackoffRate": 1.2
                          }
                      ],
                      "Next": "AllDone",
                      "Catch": [
                          {
                              "ErrorEquals": [
                                  "StillProcessingException"
                              ],
                              "Next": "WaitForProcessing"
                          },
                          {
                              "ErrorEquals": [
                                  "ProcessException"
                              ],
                              "Next": "ProcessingException"
                          },
                          {
                              "ErrorEquals": [
                                  "KillSwitchException"
                              ],
                              "Next": "KillSwitchException"
                          },
                          {
                              "ErrorEquals": [
                                  "CapacityException"
                              ],
                              "Next": "CapacityException"
                          },
                          {
                              "ErrorEquals": [
                                  "AlreadyRunningException"
                              ],
                              "Next": "ExistingSFNRunning"
                          },
                          {
                              "ErrorEquals": [
                                  "States.ALL"
                               ],
                              "Next": "Error"
                          }
                      ],
                      "TimeoutSeconds": 1800
                  },
                  "WaitForProcessing": {
                      "Type": "Wait",
                      "Seconds": 30,
                      "Next": "PollAndProcessSQS"
                  },
                  "ProcessingException": {
                    "Type": "Fail",
                    "Comment": "ProcessingException Error occurred",
                    "ErrorPath": "$.Error",
                    "CausePath": "$.Cause"
                  },
                  "CapacityException": {
                    "Type": "Fail",
                    "Comment": "CapacityException Error occurred",
                    "ErrorPath": "$.Error",
                    "CausePath": "$.Cause"
                  },
                  "KillSwitchException": {
                    "Type": "Fail",
                    "Comment": "KillSwitchException Error occurred",
                    "ErrorPath": "$.Error",
                    "CausePath": "$.Cause"
                  },
                  "Error": {
                    "Type": "Fail",
                    "Comment": "Unexpected Error occurred",
                    "ErrorPath": "$.Error",
                    "CausePath": "$.Cause"
                  },
                  "ExistingSFNRunning": {
                    "Type": "Succeed"
                  },
                  "AllDone": {
                    "Type": "Succeed"
                  }
              }
            }
          -
            ControlFunction: !GetAtt 'ControlSFNFunction.Arn'
            ProcessFunction: !GetAtt 'ProcessSQSFunction.Arn'
      RoleArn: !GetAtt 'ProcessQueueStateMachineExecutionRole.Arn'
      LoggingConfiguration:
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt 'ProcessQueueStateMachineLogGroup.Arn'
        IncludeExecutionData: true
        Level: ALL
  ProcessQueueScheduleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppCode}-${Environment}-sam-Process-Queue-Machine-Schedule-Role
      Description: Role used by event rule responsible for triggering the queue process state machine.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
      ManagedPolicyArns:
      - !Ref 'StepFunctionPolicy'
  ProcessQueueScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Run the process queue state machine at the specified intervals.
      ScheduleExpression: !Sub '${ProcessQueueManagerSchedule}'
      State: DISABLED # Disabled by default (manually enabled after initial deployment)      
      Targets:
      - Arn: !GetAtt ProcessQueueStateMachine.Arn
        Id: ProcessQueueScheduleRuleTarget
        RoleArn: !GetAtt 'ProcessQueueScheduleRole.Arn'

  FileAPIFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AppCode}-${Environment}-sam-FileAPIFunction'
      RetentionInDays: 14
  FileAPIFunction:
    Type: 'AWS::Serverless::Function'
    DependsOn: FileAPIFunctionLogGroup
    Properties:
      FunctionName: !Sub '${AppCode}-${Environment}-sam-FileAPIFunction'
      Handler: 'lambda.handler'
      Runtime: 'python3.11'
      CodeUri: '../src/functions/file-api/'
      MemorySize: 128
      Timeout: 10
      Tracing: 'Active'
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        - !Ref 'DynamoReadWritePolicy'
        - !Ref 'S3ReadWritePolicy'
      Layers:
        - !Ref 'UtilsLayer'
        - !Ref 'ModelsLayer'
      Environment:
        Variables:
          USER_TABLE: !Sub '${AppCode}-${Environment}-sam-users'
      Events:
        FilesRoot:
          Type: Api 
          Properties:
            Path: /files
            Method: any
            RestApiId: !Ref FileAPI
        Files:
          Type: Api 
          Properties:
            Path: /files/{proxy+}
            Method: any
            RestApiId: !Ref FileAPI
  FileAPICloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  FileAPIAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt 
        - FileAPICloudWatchRole
        - Arn
  FileAPILogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub 'API-Gateway-Execution-Logs_${FileAPI}/${APIDeploymentStage}'        
      RetentionInDays: 14
  FileAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${AppCode}-${Environment}-sam-FileAPI'
      StageName: !Ref APIDeploymentStage
      Auth:
        ApiKeyRequired: !If [ DoAPIKEY, true, false ]
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: Usage plan for this API
          Throttle:
            BurstLimit: 200
            RateLimit: 100
      AccessLogSetting:
        DestinationArn: !GetAtt FileAPILogGroup.Arn
        Format: >-
          {"requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller",
          "user":"$context.identity.user","requestTime":"$context.requestTime",
          "eventType":"$context.eventType","routeKey":"$context.routeKey",
          "status":"$context.status","connectionId":"$context.connectionId"}
      MethodSettings:
        - MetricsEnabled: true
          HttpMethod: "*"
          LoggingLevel: "INFO"
          ResourcePath: "/*"
       
Outputs:
  FileAPI:
    Value: !Sub https://${FileAPI}.execute-api.${AWS::Region}.amazonaws.com/${APIDeploymentStage}/files
