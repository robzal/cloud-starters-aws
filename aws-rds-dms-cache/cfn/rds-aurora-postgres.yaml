---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  This template provisions a simple demo Aurora Mysql Cluster. There are many more parameters available and production deployments should be designed to include some of these

Parameters:
  AppCode:
      Description: Short Name for the Application being deployed in this template, to be used in resource and stack names
      Type: String
      Default: demo-data
  Environment:
      Description: Short Name for the Environment being deployed in this template, to be used in resource and stack names
      Type: String
      Default: dev

  DBEngine:
    Description: Database Engine
    Type: String
    Default: aurora-postgresql
  DBEngineVersion:
    Description: Select Database Engine Version
    Type: String
    Default: 8.0.35
  DBInstanceClass:
    Description: Database instance to use. Default is set to graviton
    Type: String
    Default: db.t3.medium
  DBClusterIdentifier:
    Description: DB Cluster Name
    Type: String
    Default: auroroa-postgres-cluster
  DBInstanceIdentifier:
    Description: DB Instance Name
    Type: String
    Default: postgres-instance
  DBName:
    Description: Select Database Name
    Type: String
    Default: postgresdb
  DBPort:
    Description: TCP/IP Port for the Database Instance
    Type: Number
    Default: 3306
  DBMasterUsername:
    Description: Master username
    Type: String
    Default: master
  DBMasterPassword:
    Description: Master password. Make it strong, or reconfigure to use Secrets Manager
    Type: String
    Default: password
  MultiAZ:
    Description: Whether to use a secondary read only failover instance. This incurs extras costs but offers better resiliency.
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  StorageType:
    Description: Type of Disk for Data Storage. If you specify io1, io2, or gp3, you must also include a value for the Iops parameter.
    Type: String
    AllowedValues:
      - "gp2"
      - "gp3"
      - "io1"
      - "io2"
    Default: gp2
  Iops:
    Description: Initially Provisioned Disk Storage in gB
    Type: String
    Default: 200
  AllocatedStorage:
    Description: Initially Provisioned Disk Storage in gB
    Type: String
    Default: 20
  StorageEncrypted:
    Description: Whether disk storage is encrypted. If true, then AWS KMS key will be used unless a Customer KMS key arn is provided in that paramater
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  KmsKeyId:
    Type: String
    Description: "ARN of the Customer KMS Key for data storage encryption if needed"
    Default: ""

  MinServerlessScaling:
    Description: Low Scaling Limit for Serverless Clusters
    Type: String
    Default: 2
  MaxServerlessScaling:
    Description: High Scaling Limit for Serverless Clusters
    Type: String
    Default: 4
  EnableSecondaryInstance:
    Type: String
    Description: "Specify whether to add a secondary reader instance (incurs extra charges)"
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  EnableIAMAuthentication:
    Type: String
    Description: "Specify whether to add IAM DB authentication to the RDS cluster"
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
  EnableRDSProxy:
    Type: String
    Description: "Specify whether to attach an RDS Proxy to the RDS cluster"
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  EnableDeletionProtection:
    Type: String
    Description: "Specify whether to enable RDS instance deletion protection"
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  DeleteAutomatedBackups:
    Type: String
    Description: "Specify whether to delete automated backups if the database is deleted"
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
  BackupRetentionPeriod:
    Type: String
    Description: "Specify how many days worth of database backups are needed"
    Default: "7"
  PreferredMaintenanceWindow:
    Type: String
    Description: "Specify database maintenance window time (UTC) of at least 30 minutes."
    Default: "sun:20:00-Sun:20:30"

  VPCID:
      Description: VPCID to deploy this infrastructure into
      Type: String
      Default: vpc-021729ddaa66979e8
  VPCCIDRBlock:
      Description: CIDR Block for VPC, for use in security group rules
      Type: String
      Default: 10.0.0.0/16
  AdminIPAddressCIDR:
      Description: IP Address (CIDR format), open to admin for use in security group rules
      Type: String
      Default: 1.2.3.4/32
  InstanceSubnet1:
      Description: Subnet ID 1 for Instance
      Type: String
      Default: subnet-0650a76442c640904
  InstanceSubnet2:
      Description: Subnet ID 2 for Instance
      Type: String
      Default: subnet-0009a4a8e07242139
  InstanceSubnet3:
      Description: Subnet ID 2 for Instance
      Type: String
      Default: subnet-0009a4a8e07242139
  PubliclyAccessible:
    Description: Specifies if a public IPv4 address is assigned to the RDS Instance. This also requires Public VPC Subnet IDs to be provided
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  DNSAliasZone: 
      Description: (Optional) R53 Domain Name of the DNS alias for the ELB being created
      Type: String
      Default: aws.worxdesign.com.
  DNSAliasHost:
      Description: (Optional) Alias Name for the ELB being created (minus the zone / domain)
      Type: String
      Default: ""
  PrimaryRegion:
      Description: Primary Region ID to detect where to deploy account wide resources.
      Type: String
      Default: "ap-southeast-2"

Conditions:
    DoEncryption: !Not [!Equals [!Ref StorageEncrypted, "false"]]
    DoDNS: !Not [!Equals [!Ref DNSAliasHost, ""]]
    DoServerless: !Equals [!Ref DBInstanceClass, "db.serverless"]
    DoRDSProxy: !Equals [!Ref EnableRDSProxy, "true"]
    DoSecondary: !Equals [!Ref EnableSecondaryInstance, "true"]
    IsPrimaryRegion: !Equals 
        - !Ref PrimaryRegion
        - !Ref AWS::Region

Resources:
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${AppCode}-${Environment}-rds-aurora-postgres-subnetgroup
      DBSubnetGroupDescription: Database subnet group
      SubnetIds:
        - !Ref InstanceSubnet1
        - !Ref InstanceSubnet2
        - !Ref InstanceSubnet3
      Tags:
      - Key: Name
        Value: !Sub ${AppCode}-${Environment}-rds-aurora-postgres-instance-subnetgroup
  DBInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
          GroupName: !Sub '${AppCode}-${Environment}-rds-aurora-postgres-SG'
          GroupDescription: Enable DB requests through to RDS
          VpcId: !Ref VPCID
          SecurityGroupIngress:
              - IpProtocol: 'tcp'
                FromPort: !Ref DBPort
                ToPort: !Ref DBPort
                CidrIp: !Ref VPCCIDRBlock
              - IpProtocol: 'tcp'
                FromPort: !Ref DBPort
                ToPort: !Ref DBPort
                # CidrIp: 0.0.0.0/0
                CidrIp: !Ref AdminIPAddressCIDR
          SecurityGroupEgress:
              - IpProtocol: '-1'
                CidrIp: 0.0.0.0/0
  DBCluster:
    Type: AWS::RDS::DBCluster
    DependsOn: [DBSubnetGroup, DBInstanceSecurityGroup]
    Properties:
      DBClusterIdentifier: !Sub '${AppCode}-${Environment}-${DBClusterIdentifier}'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBInstanceSecurityGroup
      Engine: !Ref DBEngine
      EngineVersion: !Ref DBEngineVersion
      DatabaseName: !Ref DBName
      Port: !Ref DBPort
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterPassword
      StorageEncrypted: !Ref StorageEncrypted
      KmsKeyId: !If [DoEncryption, !Ref KmsKeyId, !Ref 'AWS::NoValue']
      DeletionProtection: !Ref EnableDeletionProtection
      PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow
      BackupRetentionPeriod: !Ref BackupRetentionPeriod
      CopyTagsToSnapshot: true
      EnableCloudwatchLogsExports: 
      - postgresql
      EnableIAMDatabaseAuthentication: !Ref EnableIAMAuthentication
      # AssociatedRoles:
      #   - FeatureName: s3Import
      #     RoleArn: 'arn:aws:iam::123456789012:role/RDSLoadFromS3'
      #   - FeatureName: s3Export
      #     RoleArn: 'arn:aws:iam::123456789012:role/RDSLoadFromS3'
      ServerlessV2ScalingConfiguration:
        !If
        - DoServerless
        - 
          MinCapacity: !Ref MinServerlessScaling
          MaxCapacity: !Ref MaxServerlessScaling      
        - !Ref "AWS::NoValue"
      Tags:
      - Key: Name
        Value: !Sub "${AppCode}-${Environment}-${DBClusterIdentifier}"
  DBInstance1:
    Type: AWS::RDS::DBInstance
    DependsOn: [DBSubnetGroup, DBInstanceSecurityGroup]
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: !Sub '${AppCode}-${Environment}-${DBClusterIdentifier}-${DBInstanceIdentifier}-1'
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: !Ref DBEngine
      EngineVersion: !Ref DBEngineVersion
      DBInstanceClass: !Ref DBInstanceClass
      PubliclyAccessible: !Ref PubliclyAccessible
      StorageEncrypted: !Ref StorageEncrypted
      KmsKeyId: !If [DoEncryption, !Ref KmsKeyId, !Ref 'AWS::NoValue']
      PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow
      Tags:
      - Key: Name
        Value: !Sub "${AppCode}-${Environment}-${DBClusterIdentifier}-${DBInstanceIdentifier}-1"
  DBInstance2:
    Type: AWS::RDS::DBInstance
    DependsOn: [DBSubnetGroup, DBInstanceSecurityGroup, DBInstance1]
    Condition: DoSecondary
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: !Sub '${AppCode}-${Environment}-${DBClusterIdentifier}-${DBInstanceIdentifier}-2'
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: !Ref DBEngine
      EngineVersion: !Ref DBEngineVersion
      DBInstanceClass: !Ref DBInstanceClass
      PubliclyAccessible: !Ref PubliclyAccessible
      StorageEncrypted: !Ref StorageEncrypted
      KmsKeyId: !If [DoEncryption, !Ref KmsKeyId, !Ref 'AWS::NoValue']
      PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow
      Tags:
      - Key: Name
        Value: !Sub "${AppCode}-${Environment}-${DBClusterIdentifier}-${DBInstanceIdentifier}-2"

  DBProxySecret:
    Type: 'AWS::SecretsManager::Secret'
    Condition: DoRDSProxy
    Properties:
      Name: !Sub '${AppCode}-${Environment}-rds-proxy-secret'
      Description: This secret has a hardcoded password in SecretString (use GenerateSecretString instead)
      SecretString: '{"username":"MasterUsername","password":"secret-password"}'
  DBProxyRole:
    Type: AWS::IAM::Role
    Condition: DoRDSProxy
    Properties:
      RoleName: !Sub '${AppCode}-${Environment}-rds-proxy-role'
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ['rds.amazonaws.com']
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:*'
                  - 'kms:DescribeKey'
                  - 'kms:ListAliases'
                  - 'kms:ListKeys'
                Resource: '*'
  DBProxy:
    Type: AWS::RDS::DBProxy
    Condition: DoRDSProxy
    Properties:
      DebugLogging: true
      DBProxyName: !Sub '${AppCode}-${Environment}-rds-proxy'
      EngineFamily: POSTGRESQL 
      IdleClientTimeout: 120
      RequireTLS: true
      RoleArn:
        !GetAtt DBProxyRole.Arn
      Auth:
        - {AuthScheme: SECRETS, SecretArn: !Ref DBProxySecret, IAMAuth: DISABLED}
        # - {AuthScheme: SECRETS, SecretArn: !Ref DBProxySecret, IAMAuth: REQUIRED}
      VpcSubnetIds:
        - !Ref InstanceSubnet1
        - !Ref InstanceSubnet2
        - !Ref InstanceSubnet3
      VpcSecurityGroupIds:
        - !Ref DBInstanceSecurityGroup
  DBProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    Condition: DoRDSProxy
    Properties:
      DBProxyName: !Ref DBProxy
      DBClusterIdentifiers: [!Ref DBCluster]
      TargetGroupName: default
      ConnectionPoolConfigurationInfo:
          MaxConnectionsPercent: 100
          MaxIdleConnectionsPercent: 50
          ConnectionBorrowTimeout: 120

  # Route53:
  #         Type: AWS::Route53::RecordSetGroup
  #         Condition: DoDNS
  #         Properties:
  #             Comment:  Alias for the API Service ELB.
  #             HostedZoneName: !Ref DNSAliasZone
  #             RecordSets:
  #             - Name: !Join ["", [!Ref DNSAliasHost, ".", !Ref DNSAliasZone]]
  #               Type: A
  #               AliasTarget:
  #                 HostedZoneId: !GetAtt DBCluster.Endpoint.HostedZoneID
  #                 DNSName: !GetAtt DBCluster.Endpoint.Address

Outputs:
  DBClusterEndpoint:
    Description: DNS Endpoint for the DB Cluster Writer Endpoint
    Value: !GetAtt DBCluster.Endpoint.Address
    Export:
      Name: !Sub "${AppCode}-${Environment}-${DBClusterIdentifier}-Endpoint"

  DBClusterReadEndpoint:
    Description: DNS Read Endpoint for the DB Cluster Writer Endpoint
    Value: !GetAtt DBCluster.ReadEndpoint.Address
    Export:
      Name: !Sub "${AppCode}-${Environment}-${DBClusterIdentifier}-ReadEndpoint"
