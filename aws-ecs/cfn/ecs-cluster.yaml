AWSTemplateFormatVersion: '2010-09-09'
Description: >
    This Template Creates ECS Clusters for Linux and Windows Containers.
Parameters: 
    AppCode:
        Description: Short Name for the Application being deployed in this template, to be used in resource and stack names
        Type: String
        Default: demo-ecs
    Environment:
        Description: Short Name for the Environment being deployed in this template, to be used in resource and stack names
        Type: String
        Default: tools

    ECSClusterNameLinux:
        Description: Name for the Linux Cluster being deployed to
        Type: String
        Default: demo-ecs-tools-Linux-Cluster
    ECSClusterNameWindows:
        Description: Name for the Windows Cluster being deployed to
        Type: String
        Default: demo-ecs-tools-Windows-Cluster

    ECSLinuxInstanceCount: 
        Description: How many instances will launch for the ECS Cluster?
        Type: String
        Default: 0
    ECSLinuxInstanceType:
        Description: Instance type for the ECS Cluster
        Type: String
        Default: t3.small
    ECSLinuxInstanceAMI:
        Description: Instance AMI for the ECS Cluster (Non Fargate)
        Type: String
        # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
        Default: ami-0a53f55dfbc2fe407
    ECSLinuxInstanceKey:
        Type: AWS::EC2::KeyPair::KeyName
        Default: AWS-robzal

    ECSWindowsInstanceCount: 
        Description: How many instances will launch for the ECS Cluster?
        Type: String
        Default: 0
    ECSWindowsInstanceType:
        Description: Instance type for the ECS Cluster
        Type: String
        Default: t3.large
    ECSWindowsInstanceAMI:
        Description: Instance AMI for the ECS Cluster (Non Fargate)
        Type: String
        # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_windows_AMI.html
        Default: ami-0a358cdbb6d90dbbd
    ECSWindowsInstanceKey:
        Type: AWS::EC2::KeyPair::KeyName
        Default: AWS-robzal

    ECSClusterSecGroups:
        Description: Instance type for the ECS Cluster
        Type: CommaDelimitedList
        Default: sg-09d40416a978d5c72
    ECSClusterSubnet1:
        Description: Subnet ID 1 for Cluster
        Type: String
        Default: subnet-031079d089d751bce
    ECSClusterSubnet2:
        Description: Subnet ID 2 for Cluster
        Type: String
        Default: subnet-0cad3d3e49c3c4bac

    ECRTrustedAccounts:
        Type: CommaDelimitedList
        Default: "arn:aws:iam::238160719262:root,arn:aws:iam::238160719262:root"
        Description: Whitelist Accounts to access the ECR Repository
Resources:
    ECRRepository:
      Type: AWS::ECR::Repository
      Properties: 
        RepositoryName: !Sub ${AppCode}-demo-repo
        RepositoryPolicyText: 
          Version: "2012-10-17"
          Statement: 
            - 
              Sid: AllowPushPull
              Effect: Allow
              Principal: 
                AWS: !Ref ECRTrustedAccounts
              Action: 
                - "ecr:*"
    ECSNodeInstanceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                - Effect: Allow
                  Principal:
                    Service:
                        - ec2.amazonaws.com
                  Action:
                        - "sts:AssumeRole"
            RoleName: !Sub "${AppCode}-${Environment}-ECS-Instance-Role"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
                - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
            Path: /
    ECSNodeInstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: /
            Roles:
                - Ref: ECSNodeInstanceRole

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref ECSClusterNameLinux
    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId: !Ref ECSLinuxInstanceAMI
            InstanceType: !Ref ECSLinuxInstanceType
            SecurityGroups: !Ref ECSClusterSecGroups
            IamInstanceProfile: !Ref ECSNodeInstanceProfile
            KeyName: !Ref ECSLinuxInstanceKey
            UserData:
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    echo ECS_CLUSTER=${ECSClusterNameLinux} >> /etc/ecs/ecs.config;
                    echo ECS_BACKEND_HOST= >> /etc/ecs/ecs.config;
                    
                    # Stop the ECS agent container
                    docker stop ecs-agent

                    # Restart Docker
                    /etc/init.d/docker restart

                    # Start the ECS agent container
                    docker start ecs-agent
                    echo Done;
    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier: 
            - !Ref ECSClusterSubnet1
            - !Ref ECSClusterSubnet2
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: !Ref ECSLinuxInstanceCount
            MaxSize: !Ref ECSLinuxInstanceCount
            DesiredCapacity: !Ref ECSLinuxInstanceCount
            Tags:
                - Key: Name
                  Value: !Sub ${AppCode}-${Environment} ECS Linux host
                  PropagateAtLaunch: true
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT5M
                SuspendProcesses:
                  - HealthCheck
                  - ReplaceUnhealthy
                  - AZRebalance
                  - AlarmNotification
                  - ScheduledActions

    ECSClusterWindows:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref ECSClusterNameWindows
    ECSLaunchConfigurationWindows:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId: !Ref ECSWindowsInstanceAMI
            InstanceType: !Ref ECSWindowsInstanceType
            SecurityGroups: !Ref ECSClusterSecGroups
            IamInstanceProfile: !Ref ECSNodeInstanceProfile
            KeyName: !Ref ECSWindowsInstanceKey
            UserData:
                "Fn::Base64": !Sub |
                    <powershell>
                    Initialize-ECSAgent -Cluster ${ECSClusterNameWindows} -EnableTaskIAMRole -LoggingDrivers '["json-file","awslogs"]' -EnableTaskENI 
                    </powershell>
    ECSAutoScalingGroupWindows:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier: 
            - !Ref ECSClusterSubnet1
            - !Ref ECSClusterSubnet2
            LaunchConfigurationName: !Ref ECSLaunchConfigurationWindows
            MinSize: !Ref ECSWindowsInstanceCount
            MaxSize: !Ref ECSWindowsInstanceCount
            DesiredCapacity: !Ref ECSWindowsInstanceCount
            Tags:
                - Key: Name
                  Value: !Sub ${AppCode}-${Environment} ECS Windows host
                  PropagateAtLaunch: true
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT5M
                SuspendProcesses:
                  - HealthCheck
                  - ReplaceUnhealthy
                  - AZRebalance
                  - AlarmNotification
                  - ScheduledActions

Outputs: 
    ECSCluster: 
        Description: A reference to the ECS Services Cluster 
        Value: !Ref ECSCluster
        Export:
          Name: B2BIECSCluster-Services
