# Account & Region parameters
export PRIMARY_REGION=ap-southeast-2
export SECONDARY_REGIONS=

export ENVIRONMENT=prod
export AWS_ACCOUNT=${PROD_ACCOUNT}
export AWS_REGION=${PRIMARY_REGION}
export REGION_EXTENSION=

# Deployment parameters
export LOGGING_BUCKET=${AWS_ACCOUNT}-logging${REGION_EXTENSION}
export CHANGESET_OPTION=--no-execute-changeset
# export CHANGESET_OPTION=

# CICD parameters
export DEPLOYMENT_ROLE_ARN=
# set deployment-role-arn to use an existing role or to create on in another account separately to the pipeline stack 
export DEPLOYMENT_ROLE_ARN=${DEPLOYMENT_ROLE_ARN_PROD}


# Workload parameters

export DEPLOYMENT_ACCOUNT=${PROD_ACCOUNT}
export EKS_CLUSTER_NAME=${APP_CODE}-${ENVIRONMENT}-Cluster
export EKS_CLUSTER_ROLE_NAME=${APP_CODE}-${ENVIRONMENT}-EKS-Cluster-Role
export EKS_CLUSTER_SUBNET_IDS=subnet-05353a27459bd1758,subnet-0f4ca112b5db2cd4c
export EKS_CLUSTER_SECGROUP_IDS=sg-03c7070ee6977aec3
export EKS_NODE_SUBNET_IDS=subnet-05353a27459bd1758,subnet-0f4ca112b5db2cd4c 
export EKS_NODE_SECGROUP_IDS=sg-03c7070ee6977aec3
export EKS_NODE_INSTANCE_ROLE_NAME=${APP_CODE}-${ENVIRONMENT}-EKS-Instance-Role
export EKS_LOAD_BALANCER_ROLE_NAME=${APP_CODE}-${ENVIRONMENT}-EKS-LoadBal-Role
export LOAD_BALANCER_SSL_CERT=arn:aws:acm:${PRIMARY_REGION}:${PROD_ACCOUNT}:certificate/32d40ac7-0803-4d36-a190-a847cad8e60f
export EKS_VPC_ID=vpc-0adba4c2982aab79a
export LINUX_NODEGROUP_NAME=${APP_CODE}-${ENVIRONMENT}-Linux-NodeGroup
export WINDOWS_NODEGROUP_NAME=${APP_CODE}-${ENVIRONMENT}-Windows-NodeGroup

export KUBE_ADMIN_ROLE=arn:aws:iam::${PROD_ACCOUNT}:role/${ORG_CODE}AdminAccess
export KUBE_POWERUSER_ROLE=arn:aws:iam::${PROD_ACCOUNT}:role/${ORG_CODE}PowerUserAccess
export KUBE_READONLY_ROLE=arn:aws:iam::${PROD_ACCOUNT}:role/${ORG_CODE}ReadOnlyAccess

# When changing EKS versions, nodegroup AMIs will also need to be changed
export KUBECTL_URL=https://s3.us-west-2.amazonaws.com/amazon-eks/1.33.3/2025-08-03/bin/linux/amd64/kubectl
export EKS_CLUSTER_VERSION=1.33
export EKS_CLUSTER_ALLOWED_PUBLIC_IPS=1.2.3.4/32

export LINUX_NODEGROUP_MIN=1
export LINUX_NODEGROUP_MAX=2
export LINUX_NODEGROUP_INSTANCE_TYPE=t3.large
export LINUX_NODEGROUP_KEYPAIR=AWS-robzal
# make sure ami matches the eks version being deployed 
# https://docs.aws.amazon.com/eks/latest/userguide/eks-linux-ami-versions.html
export LINUX_NODEGROUP_AMIID=ami-0b6e48b6059b4dfc0
# make sure amitype matches the ami 
# https://docs.aws.amazon.com/AWSCloudFormation/latest/TemplateReference/aws-resource-eks-nodegroup.html#cfn-eks-nodegroup-amitype
export LINUX_NODEGROUP_AMITYPE=AL2023_x86_64_STANDARD
# export LINUX_NODEGROUP_AMITYPE=AL2_x86_64
export LINUX_NODEGROUP_VOL1_SIZE=80
export LINUX_TASK_IMAGE=nginxdemos/hello
export LINUX_TASK_COUNT=1

export WINDOWS_NODEGROUP_MIN=0
export WINDOWS_NODEGROUP_MAX=0
export WINDOWS_NODEGROUP_INSTANCE_TYPE=t3.2xlarge
export WINDOWS_NODEGROUP_KEYPAIR=AWS-robzal
# make sure ami matches the eks version being deployed 
# https://docs.aws.amazon.com/eks/latest/userguide/eks-ami-versions-windows.html
export WINDOWS_NODEGROUP_AMIID=ami-018bebb3189459c25
# make sure amitype matches the ami 
# https://docs.aws.amazon.com/AWSCloudFormation/latest/TemplateReference/aws-resource-eks-nodegroup.html#cfn-eks-nodegroup-amitype
export WINDOWS_NODEGROUP_AMITYPE=WINDOWS_CORE_2022_x86_64
export WINDOWS_NODEGROUP_VOL1_SIZE=120
export WINDOWS_TASK_IMAGE=mcr.microsoft.com/windows/servercore/iis:windowsservercore-ltsc2022
export WINDOWS_TASK_COUNT=0
