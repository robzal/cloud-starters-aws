AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Setup Basic Auditing and Security Services
Parameters:
  EnableConfig:
    Description: Bool value whether to create and enable awsconfig resources (these incur some costs)
    Type: String 
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  EnableGuardDuty:
    Description: Bool value whether to create and enable guard duty resources (these incur some costs)
    Type: String 
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  GuardDutyEmailSubsubscriptions:
    Description: email address to send GuardDuty finding notifications to you
    Type: String 
    Default: guardduty@example.com
Conditions:
  ShouldEnableConfig: !Equals 
    - !Ref EnableConfig
    - 'true'
  ShouldEnableGuardDuty: !Equals 
    - !Ref EnableGuardDuty
    - 'true'
Resources:
  # Enable CloudTrail
  CloudTrailRoot:
    Type: AWS::CloudTrail::Trail
    DependsOn: [CloudTrailIamRole]
    Properties: 
      EnableLogFileValidation: true
      EventSelectors: [{DataResources: [], IncludeManagementEvents: true, ReadWriteType: All}]
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      S3BucketName: !Sub '${AWS::AccountId}-cloudtrail'
      CloudWatchLogsLogGroupArn: !GetAtt [CloudTrailLogGroup, Arn] 
      CloudWatchLogsRoleArn: !GetAtt [CloudTrailIamRole, Arn]
      TrailName: !Sub '${AWS::AccountId}-cloudtrail-root' 
  CloudTrailLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub 'aws-cloudtrail-logs-${AWS::AccountId}'
  CloudTrailIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: allow-access-to-cw-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  # Enable AWS Config
  ConfigRecorder:
    Type: 'AWS::Config::ConfigurationRecorder'
    Condition: ShouldEnableConfig
    DependsOn: [ConfigIamRole]
    Properties:
      RoleARN:  !GetAtt [ConfigIamRole, Arn]
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
  ConfigDeliveryChannel:
    Type: 'AWS::Config::DeliveryChannel'
    Condition: ShouldEnableConfig
    Properties:
      S3BucketName: !Sub '${AWS::AccountId}-awsconfig'
      ConfigSnapshotDeliveryProperties: 
        DeliveryFrequency: "Six_Hours"
  ConfigIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSConfigRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: allow-access-to-config-s3-bucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource:
                  -  !Sub "arn:aws:s3:::${AWS::AccountId}-awsconfig/*"
                Condition:
                  StringLike:
                    's3:x-amz-acl': bucket-owner-full-control
              - Effect: Allow
                Action:
                  - 's3:GetBucketAcl'
                  - 's3:ListBucket'
                Resource:
                  -  !Sub "arn:aws:s3:::${AWS::AccountId}-awsconfig"
  ConfigRuleEC2Public:
    Type: 'AWS::Config::ConfigRule'
    Condition: ShouldEnableConfig
    DependsOn: [ConfigRecorder]
    Properties:
      ConfigRuleName: ec2-instance-no-public-ip
      Scope:
        ComplianceResourceTypes:
          - 'AWS::EC2::Instance'
      Description: >-
        A Config rule that checks whether Amazon Elastic Compute Cloud (Amazon
        EC2) instances have a public IP association. The rule is NON_COMPLIANT
        if the publicIp field is present in the Amazon EC2 instance
        configuration item. This rule applies only to IPv4
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_NO_PUBLIC_IP
  ConfigRuleCustomExample:
    Type: AWS::Config::ConfigRule
    Condition: ShouldEnableConfig
    DependsOn: [ConfigCustomLambdaPermission, ConfigRecorder]
    Properties:
      ConfigRuleName: ConfigRuleCustomExample
      Scope:
        # ComplianceResourceId: !Ref 'Ec2Volume'
        ComplianceResourceTypes: ['AWS::EC2::Volume']
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier: !GetAtt [ConfigCustomLambdaFunction, Arn]
  ConfigCustomLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [ConfigCustomLambdaFunction, Arn]
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  ConfigCustomLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          var aws  = require('aws-sdk');
          var config = new aws.ConfigService();
          var ec2 = new aws.EC2();
          exports.handler = function(event, context) {
              compliance = evaluateCompliance(event, function(compliance, event) {
                  var configurationItem = JSON.parse(event.invokingEvent).configurationItem;
                  var putEvaluationsRequest = {
                      Evaluations: [{
                          ComplianceResourceType: configurationItem.resourceType,
                          ComplianceResourceId: configurationItem.resourceId,
                          ComplianceType: compliance,
                          OrderingTimestamp: configurationItem.configurationItemCaptureTime
                      }],
                      ResultToken: event.resultToken
                  };
                  config.putEvaluations(putEvaluationsRequest, function(err, data) {
                      if (err) context.fail(err);
                      else context.succeed(data);
                  });
              });
          };
          function evaluateCompliance(event, doReturn) {
              var configurationItem = JSON.parse(event.invokingEvent).configurationItem;
              var status = configurationItem.configurationItemStatus;
              if (configurationItem.resourceType !== 'AWS::EC2::Volume' || event.eventLeftScope || (status !== 'OK' && status !== 'ResourceDiscovered'))
                  doReturn('NOT_APPLICABLE', event);
              else ec2.describeVolumeAttribute({VolumeId: configurationItem.resourceId, Attribute: 'autoEnableIO'}, function(err, data) {
                  if (err) context.fail(err);
                  else if (data.AutoEnableIO.Value) doReturn('COMPLIANT', event);
                  else doReturn('NON_COMPLIANT', event);
              });
          }
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: '60'
      Role: !GetAtt [ConfigCustomLambdaExecutionRole, Arn]
  ConfigCustomLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: ['logs:*', 'config:PutEvaluations', 'ec2:Describe*']
            Resource: '*'

  # Enable AWS GuardDuty and notify findings
  GuardDuty:
    Type: 'AWS::GuardDuty::Detector'
    Properties:
      Enable: !If [ShouldEnableGuardDuty, 'true', 'false']
  GuardDutyEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: guardduty-detect-finding
      Description: >-
        A CloudWatch Event Rule that triggers on Amazon GuardDuty findings. The
        Event Rule can be used to trigger notifications or remediative actions
        using AWS Lambda.
      State: ENABLED
      Targets:
        - Arn:
            Ref: GuardDutySnsTopic
          Id: target-id1
      EventPattern:
        detail-type:
          - GuardDuty Finding
        source:
          - aws.guardduty
  GuardDutySnsTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref GuardDutyEmailSubsubscriptions
          Protocol: email
      TopicName: guardduty-event-notify
  GuardDutySnsTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Sid: GuardDutySns
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:GetTopicAttributes'
              - 'SNS:SetTopicAttributes'
              - 'SNS:AddPermission'
              - 'SNS:RemovePermission'
              - 'SNS:DeleteTopic'
              - 'SNS:Subscribe'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:Publish'
              - 'SNS:Receive'
            Resource:
              Ref: GuardDutySnsTopic
            Condition:
              StringEquals:
                'AWS:SourceOwner':
                  Ref: 'AWS::AccountId'
          - Sid: GuardDutySnsPublish
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource:
              Ref: GuardDutySnsTopic
      Topics:
        - Ref: GuardDutySnsTopic