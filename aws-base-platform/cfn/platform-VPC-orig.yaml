  AWSTemplateFormatVersion: "2010-09-09"
  Description: "Creates a VPC with optional NAT Gateway, VPC Peering and/or VPN Endpoint"
  Parameters:
    VPCName:
      Description: The name of the VPC being created.
      Type: String
      Default: "MyOrgVPC"
    VPCCIDRRange:
      Description: The /16 CIDR Range of the VPC.
      Type: String
      Default: "10.0.0.0/16"
    VPCCIDRBlockPrefix:
      Description: The /16 prefix of the VPC CIDR Block.
      Type: String
      Default: "10.0"
    CreateNATGW:
      Description: Create or remove NATGWs.
      Type: String
      Default: false
      AllowedValues: [true, false]
    CreateElasticIP:
      Description: Create or remove ElasticIPs.
      Type: String
      Default: false
      AllowedValues: [true, false]
    CreateClientVPN:
      Description: Create or remove VPN Client Endpoint.
      Type: String
      Default: true
      AllowedValues: [true, false]
    CreatePeeringRole:
      Description: Create or remove Target Peering IAM Role.
      Type: String
      Default: false
      AllowedValues: [true, false]
    CreatePeeringConnection:
      Description: Create or remove VPC Peering Connection.
      Type: String
      Default: false
      AllowedValues: [true, false]
    PeerVPC:
      Description: The VPCID of the peering VPC.
      Type: String
      Default: 'vpc-1234567890'
    PeerVPCAccountID:
      Description: The accountID containing the VPC to peer to.
      Type: String
      Default: "111111111111"
    PeerVPCRole:
      Description: The arn of the peering role to assume.
      Type: String
    PeerVPCCIDRRange:
      Description: The CIDR Block of the Peered VPC.
      Type: String
      Default: "10.10.0.0/16"
    PeerRequesterAccountIds:
      Description: CSV list of trusted accounts to assume the Peering Role.
      Type: String
      Default: "967792619409,271005954527"
    VPNCIDRRange:
      Description: The CIDR Block issued by the VPN endpoint.
      Type: String
      Default: "10.240.0.0/22"
    VPNServerCertificateArn:
      Description: The arn of a server certificate for the VPN endpoint to use.
      Type: String
      Default: 'arn:aws:acm:ap-southeast-2:238160719262:certificate/da07208b-b251-4225-aefc-924cec6382fa'
    VPNClientCertificateArn:
      Description: The arn of a client certificate for the VPN endpoint to use.
      Type: String
      Default: 'arn:aws:acm:ap-southeast-2:238160719262:certificate/da07208b-b251-4225-aefc-924cec6382fa'
  Conditions:
    ShouldCreateNATGW:
      !Equals [true, !Ref CreateNATGW]
    ShouldCreateEIP:
      !Equals [true, !Ref CreateElasticIP]
    ShouldCreateVPN:
      !Equals [true, !Ref CreateClientVPN]
    ShouldCreatePeeringRole:
      !Equals [true, !Ref CreatePeeringRole]
    ShouldCreatePeeringConnection:
      !Equals [true, !Ref CreatePeeringConnection]
  
  Resources:
    VPC:
      Type: "AWS::EC2::VPC"
      Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock: !Sub '${VPCCIDRRange}'
        Tags:
          -
            Key: "Name"
            Value:  !Sub '${VPCName}'
    VPCFlowLog:
      Type: AWS::EC2::FlowLog
      Properties:
        LogDestination: !Sub 'arn:aws:s3:::${AWS::AccountId}-logging'
        LogDestinationType: s3
        ResourceId: !Ref VPC
        ResourceType: VPC
        TrafficType: ALL
    PublicSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone: !Sub '${AWS::Region}a'
        CidrBlock: !Sub '${VPCCIDRBlockPrefix}.0.0/24'
        MapPublicIpOnLaunch: "true"
        Tags:
          -
            Key: "Name"
            Value:  !Sub '${VPCName}-Public-A'
    PublicSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone: !Sub '${AWS::Region}b'
        CidrBlock: !Sub '${VPCCIDRBlockPrefix}.1.0/24'
        MapPublicIpOnLaunch: "true"
        Tags:
          -
            Key: "Name"
            Value:  !Sub '${VPCName}-Public-B'
    InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          -
            Key: "Name"
            Value:  !Sub '${VPCName}-IGW'
    GatewayToInternet:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId:
          Ref: "VPC"
        InternetGatewayId:
          Ref: "InternetGateway"
    PublicRouteTable:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "Name"
            Value:  !Sub '${VPCName}-Public'
    PublicRoute:
      Type: "AWS::EC2::Route"
      DependsOn: "GatewayToInternet"
      Properties:
        RouteTableId:
          Ref: "PublicRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId:
          Ref: "InternetGateway"
    PublicSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet0"
        RouteTableId:
          Ref: "PublicRouteTable"
    PublicSubnetRouteTableAssociation1:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet1"
        RouteTableId:
          Ref: "PublicRouteTable"
    PublicNetworkAcl:
      Type: "AWS::EC2::NetworkAcl"
      Properties:
        VpcId:
          Ref: "VPC"
    InboundHTTPPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"
    OutboundPublicNetworkAclEntry:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNetworkAcl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "true"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"
    PublicSubnetNetworkAclAssociation0:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet0"
        NetworkAclId:
          Ref: "PublicNetworkAcl"
    PublicSubnetNetworkAclAssociation1:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "PublicSubnet1"
        NetworkAclId:
          Ref: "PublicNetworkAcl"

    PrivateSubnet0:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone: !Sub '${AWS::Region}a'
        CidrBlock: !Sub '${VPCCIDRBlockPrefix}.10.0/24'
        Tags:
          -
            Key: "Name"
            Value:  !Sub '${VPCName}-Private-A'
    PrivateSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "VPC"
        AvailabilityZone: !Sub '${AWS::Region}b'
        CidrBlock: !Sub '${VPCCIDRBlockPrefix}.11.0/24'
        Tags:
          -
            Key: "Name"
            Value:  !Sub '${VPCName}-Private-B'
    ElasticIP0:
      Type: "AWS::EC2::EIP"
      Condition: ShouldCreateEIP
      Properties:
        Domain: "vpc"
    ElasticIP1:
      Type: "AWS::EC2::EIP"
      Condition: ShouldCreateEIP
      Properties:
        Domain: "vpc"
    NATGateway0:
      Type: "AWS::EC2::NatGateway"
      Condition: ShouldCreateNATGW
      Properties:
        AllocationId:
          Fn::GetAtt:
            - "ElasticIP0"
            - "AllocationId"
        SubnetId:
          Ref: "PublicSubnet0"
    NATGateway1:
      Type: "AWS::EC2::NatGateway"
      Condition: ShouldCreateNATGW
      Properties:
        AllocationId:
          Fn::GetAtt:
            - "ElasticIP1"
            - "AllocationId"
        SubnetId:
          Ref: "PublicSubnet1"
    PrivateRouteTable0:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "Name"
            Value:  !Sub '${VPCName}-Private1'
    PrivateRouteTable1:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "VPC"
        Tags:
          -
            Key: "Name"
            Value:  !Sub '${VPCName}-Private2'
    PrivateRouteToInternet0:
      Type: "AWS::EC2::Route"
      Condition: ShouldCreateNATGW
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable0"
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId:
          Ref: "NATGateway0"
    PrivateRouteToInternet1:
      Type: "AWS::EC2::Route"
      Condition: ShouldCreateNATGW
      Properties:
        RouteTableId:
          Ref: "PrivateRouteTable1"
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId:
          Ref: "NATGateway1"
    PrivateSubnetRouteTableAssociation0:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubnet0"
        RouteTableId:
          Ref: "PrivateRouteTable0"
    PrivateSubnetRouteTableAssociation1:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "PrivateSubnet1"
        RouteTableId:
          Ref: "PrivateRouteTable1"

    S3Gateway:
      Type: 'AWS::EC2::VPCEndpoint'
      Properties:
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - 's3:*'
              Resource:
                - 'arn:aws:s3:::*/*'
        RouteTableIds:
          - !Ref PublicRouteTable
          - !Ref PrivateRouteTable0
          - !Ref PrivateRouteTable1
        ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
        VpcId: !Ref VPC

    VPCPeeringRole:
      Type: 'AWS::IAM::Role'
      Condition: ShouldCreatePeeringRole
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Principal:
               AWS: !Split [',', !Ref PeerRequesterAccountIds]
              Action:
                - 'sts:AssumeRole'
              Effect: Allow
        Path: /
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action: 'ec2:AcceptVpcPeeringConnection'
                  Resource: '*'
    VPCPeeringConnection:
      Type: 'AWS::EC2::VPCPeeringConnection'
      Condition: ShouldCreatePeeringConnection
      Properties:
        VpcId: !Ref VPC
        PeerVpcId: !Ref PeerVPC
        PeerOwnerId: !Ref PeerVPCAccountID
        PeerRegion: !Sub '${AWS::Region}'
        PeerRoleArn: !Ref PeerVPCRole
    PrivateRouteToPeeredVPC0:
      Type: 'AWS::EC2::Route'
      Condition: ShouldCreatePeeringConnection
      Properties:
        DestinationCidrBlock: !Ref PeerVPCCIDRRange
        RouteTableId: !Ref PrivateRouteTable0
        VpcPeeringConnectionId: !Ref VPCPeeringConnection
    PrivateRouteToPeeredVPC1:
      Type: 'AWS::EC2::Route'
      Condition: ShouldCreatePeeringConnection
      Properties:
        DestinationCidrBlock: !Ref PeerVPCCIDRRange
        RouteTableId: !Ref PrivateRouteTable1
        VpcPeeringConnectionId: !Ref VPCPeeringConnection

    VpnClientEndpoint:
      Type: AWS::EC2::ClientVpnEndpoint
      Condition: ShouldCreateVPN
      Properties: 
        AuthenticationOptions:
        - Type: "certificate-authentication"
          MutualAuthentication:
            ClientRootCertificateChainArn: !Ref VPNClientCertificateArn
        ClientCidrBlock: !Ref VPNCIDRRange
        ConnectionLogOptions: 
          Enabled: true
          CloudwatchLogGroup: !Ref VpnClientEndpointLogGroup
        Description: "Client VPN Endpoint"
        ServerCertificateArn: !Ref VPNServerCertificateArn
        SplitTunnel: true
        TransportProtocol: "tcp"
        TagSpecifications:
          - ResourceType: "client-vpn-endpoint"
            Tags:
            - Key: 'Name'
              Value: !Sub 'VPN for ${VPCName} VPC'
    VpnClientEndpointLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Condition: ShouldCreateVPN
      Properties:
        LogGroupName: !Sub 'aws-vpc-client-endpoint-logs-${AWS::AccountId}'
    VpnClientEndpointAssociation:
      Type: AWS::EC2::ClientVpnTargetNetworkAssociation
      Condition: ShouldCreateVPN
      Properties: 
        ClientVpnEndpointId: !Ref VpnClientEndpoint
        SubnetId: !Ref PrivateSubnet0
    VpnClientEndpointAuthorisation:
      Type: AWS::EC2::ClientVpnAuthorizationRule
      Condition: ShouldCreateVPN
      Properties: 
        AuthorizeAllGroups: true
        ClientVpnEndpointId: !Ref VpnClientEndpoint
        Description: !Sub '${VPCName} VPC Access'
        TargetNetworkCidr: !Ref VPCCIDRRange
    # VpnClientEndpointPeeredAuthorisation:
    #   Type: AWS::EC2::ClientVpnAuthorizationRule
    #   Condition: ShouldCreateVPN
    #   Properties: 
    #     AuthorizeAllGroups: true
    #     ClientVpnEndpointId: !Ref VpnClientEndpoint
    #     Description: !Sub 'Peered VPC go here'
    #     TargetNetworkCidr: '10.150.0.0/16'
    # VpnClientEndpointPeeredRoute:
    #   Type: AWS::EC2::ClientVpnRoute
    #   Condition: ShouldCreateVPN
    #   Properties: 
    #     ClientVpnEndpointId: !Ref VpnClientEndpoint
    #     Description: 'Peered Routes go here'
    #     DestinationCidrBlock: '10.150.0.0/16'
    #     TargetVpcSubnetId: !Ref PrivateSubnet0



  Outputs:
    VPCId:
      Description: "VPCId of VPC"
      Value:
        Ref: "VPC"
    PublicSubnet0:
      Description: "SubnetId of public subnet 0"
      Value:
        Ref: "PublicSubnet0"
    PublicSubnet1:
      Description: "SubnetId of public subnet 1"
      Value:
        Ref: "PublicSubnet1"
    PrivateSubnet0:
      Description: "SubnetId of private subnet 0"
      Value:
        Ref: "PrivateSubnet0"
    PrivateSubnet1:
      Description: "SubnetId of private subnet 1"
      Value:
        Ref: "PrivateSubnet1"
    DefaultSecurityGroup:
      Description: "DefaultSecurityGroup Id"
      Value: !GetAtt VPC.DefaultSecurityGroup

